# The format version is an indicator of the compatibility of third-party exercises with the
# Rustlings program.
# The format version is not the same as the version of the Rustlings program.
# In case Rustlings makes an unavoidable breaking change to the expected format of third-party
# exercises, you would need to raise this version and adapt to the new format.
# Otherwise, the newest version of the Rustlings program won't be able to run these exercises.
format_version = 1

# Optional multi-line message to be shown to users when just starting with the exercises.
welcome_message = """Effective-Rustlings-jpへようこそ！ 一緒にRustについて学んでいきましょう！！！"""

# Optional multi-line message to be shown to users after finishing all exercises.
final_message = """お疲れ様でした！:D"""

[[exercises]]
name = "1_integer_types"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """整数型の種類を理解し、それぞれの使い方を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_enum_1"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """列挙型(enum)の基本を学びます。構造体と違い、複数の状態を表すことができます。"""
skip_check_unsolved = false

[[exercises]]
name = "2_enum_2"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """列挙型の応用です。マッチングとパターンを学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "2_enum_3"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """さらに高度な列挙型の使い方を学びましょう。match文でさまざまなケースを処理します。"""
skip_check_unsolved = false

[[exercises]]
name = "1_methods"
dir = "2_types_Use_the_type_system_to_express_common_behavior"
test = false
hint = """メソッドの定義方法と使い方を学びます。selfの使い方を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_function_pointer"
dir = "2_types_Use_the_type_system_to_express_common_behavior"
test = false
hint = """関数ポインタを使って柔軟な関数呼び出しを学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "3_closure"
dir = "2_types_Use_the_type_system_to_express_common_behavior"
test = false
hint = """クロージャの基本を学びます。環境をキャプチャする関数を理解しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_if_let"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """if let構文を使って、OptionやResultの安全なunwrapを学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "2_processing_outsourced"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """処理を他の関数に委譲する方法を学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "3_unuse_result_type"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """Result型の未使用を防ぐ方法を学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "4_sugar_result_process"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """Result型のシュガー表現を使って、エラーハンドリングを簡潔に記述します。"""
skip_check_unsolved = true

[[exercises]]
name = "1_my_error_string"
dir = "4_types_Prefer_idiomatic_error_types"
test = false
hint = """エラー文字列を使って独自のエラーハンドリングを実装します。"""
skip_check_unsolved = false

[[exercises]]
name = "2_nest_error"
dir = "4_types_Prefer_idiomatic_error_types"
test = true
hint = """エラーのネストを学びます。エラーの中に別のエラーを含めることで、詳細なエラーメッセージを作成します。"""
skip_check_unsolved = true

[[exercises]]
name = "1_write_from_trait"
dir = "5_types_Understand_type_conversions"
test = false
hint = """Fromトレイトの実装方法を学びます。型変換の仕組みを理解しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_use_into"
dir = "5_types_Understand_type_conversions"
test = false
hint = """Intoトレイトを使った型変換の方法を学びます。IntoはFromの逆として動作します。"""
skip_check_unsolved = false

[[exercises]]
name = "3_reflexive_implementation"
dir = "5_types_Understand_type_conversions"
test = false
hint = """自己型変換の実装について学びます。型変換を繰り返し適用する方法を試してみましょう。"""
skip_check_unsolved = false
