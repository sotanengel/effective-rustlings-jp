# The format version is an indicator of the compatibility of third-party exercises with the
# Rustlings program.
# The format version is not the same as the version of the Rustlings program.
# In case Rustlings makes an unavoidable breaking change to the expected format of third-party
# exercises, you would need to raise this version and adapt to the new format.
# Otherwise, the newest version of the Rustlings program won't be able to run these exercises.
format_version = 1

# Optional multi-line message to be shown to users when just starting with the exercises.
welcome_message = """Effective-Rustlings-jpへようこそ！ 一緒にRustについて学んでいきましょう！！！"""

# Optional multi-line message to be shown to users after finishing all exercises.
final_message = """お疲れ様でした！:D"""

[[exercises]]
name = "1_integer_types"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """整数型の種類を理解し、それぞれの使い方を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_enum_1"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """列挙型(enum)の基本を学びます。構造体と違い、複数の状態を表すことができます。"""
skip_check_unsolved = false

[[exercises]]
name = "2_enum_2"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """列挙型の応用です。マッチングとパターンを学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "2_enum_3"
dir = "1_types_Use_the_type_system_to_express_your_data_structures"
test = false
hint = """さらに高度な列挙型の使い方を学びましょう。match文でさまざまなケースを処理します。"""
skip_check_unsolved = false

[[exercises]]
name = "1_methods"
dir = "2_types_Use_the_type_system_to_express_common_behavior"
test = false
hint = """メソッドの定義方法と使い方を学びます。selfの使い方を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_function_pointer"
dir = "2_types_Use_the_type_system_to_express_common_behavior"
test = false
hint = """関数ポインタを使って柔軟な関数呼び出しを学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "3_closure"
dir = "2_types_Use_the_type_system_to_express_common_behavior"
test = false
hint = """クロージャの基本を学びます。環境をキャプチャする関数を理解しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_if_let"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """if let構文を使って、OptionやResultの安全なunwrapを学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "2_processing_outsourced"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """処理を他の関数に委譲する方法を学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "3_unuse_result_type"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """Result型の未使用を防ぐ方法を学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "4_sugar_result_process"
dir = "3_types_Prefer_option_and_result_transforms_over_explicit_match_expressions"
test = false
hint = """Result型のシュガー表現を使って、エラーハンドリングを簡潔に記述します。"""
skip_check_unsolved = true

[[exercises]]
name = "1_my_error_string"
dir = "4_types_Prefer_idiomatic_error_types"
test = false
hint = """エラー文字列を使って独自のエラーハンドリングを実装します。"""
skip_check_unsolved = false

[[exercises]]
name = "2_nest_error"
dir = "4_types_Prefer_idiomatic_error_types"
test = true
hint = """エラーのネストを学びます。エラーの中に別のエラーを含めることで、詳細なエラーメッセージを作成します。"""
skip_check_unsolved = true

[[exercises]]
name = "1_write_from_trait"
dir = "5_types_Understand_type_conversions"
test = false
hint = """Fromトレイトの実装方法を学びます。型変換の仕組みを理解しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_use_into"
dir = "5_types_Understand_type_conversions"
test = false
hint = """Intoトレイトを使った型変換の方法を学びます。IntoはFromの逆として動作します。"""
skip_check_unsolved = false

[[exercises]]
name = "3_reflexive_implementation"
dir = "5_types_Understand_type_conversions"
test = false
hint = """自己型変換の実装について学びます。型変換を繰り返し適用する方法を試してみましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_use_new_type"
dir = "6_types_Embrace_the_newtype_pattern"
test = false
hint = """Newtypeパターンの基本を学びます。型の安全性を向上させる方法を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_avoid_trait_rule"
dir = "6_types_Embrace_the_newtype_pattern"
test = false
hint = """Newtypeパターンを使って、トレイトの実装ルールを回避する方法を学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "1_create_builder_1"
dir = "7_types_Use_builders_for_complex_types"
test = false
hint = """ビルダーパターンを使って複雑な型の構築を学びます。メソッドチェーンを使った実装方法を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_create_builder_2"
dir = "7_types_Use_builders_for_complex_types"
test = false
hint = """ビルダーパターンの応用編です。オプショナルなフィールドの処理方法を学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "1_iter_sum"
dir = "9_types_Consider_using_iterator_transforms_instead_of_explicit_loops"
test = false
hint = """iter().sum()を使って、反復処理で合計を求める方法を学びます。ループを使わずに結果を取得しましょう。"""
skip_check_unsolved = true

[[exercises]]
name = "2_iter_skip"
dir = "9_types_Consider_using_iterator_transforms_instead_of_explicit_loops"
test = false
hint = """iter().skip(n)で先頭からn個の要素をスキップします。イテレータを活用して効率的にデータを処理しましょう。"""
skip_check_unsolved = true

[[exercises]]
name = "3_iter_filter"
dir = "9_types_Consider_using_iterator_transforms_instead_of_explicit_loops"
test = false
hint = """iter().filter()を使って条件に合う要素を抽出します。ループを使わずにデータをフィルタリングしましょう。"""
skip_check_unsolved = true

[[exercises]]
name = "4_turbofish_syntax"
dir = "9_types_Consider_using_iterator_transforms_instead_of_explicit_loops"
test = true
hint = """collectでターボフィッシュ記法(::<>構文)を使って型を指定する方法を学びます。曖昧な型を明確に指定しましょう。"""
skip_check_unsolved = true

[[exercises]]
name = "1_clone"
dir = "10_traits_Familiarize_yourself_with_standard_traits"
test = false
hint = """Cloneトレイトを実装して、オブジェクトの複製方法を学びます。派生で自動的にCloneを付与できる方法も確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_copy"
dir = "10_traits_Familiarize_yourself_with_standard_traits"
test = false
hint = """Copyトレイトを使って、値のコピーを作成する方法を学びます。Cloneとの違いを意識しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "3_default"
dir = "10_traits_Familiarize_yourself_with_standard_traits"
test = false
hint = """Defaultトレイトを使って、デフォルト値を生成する方法を学びます。deriveマクロを活用して簡潔に実装しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "4_PartialEq"
dir = "10_traits_Familiarize_yourself_with_standard_traits"
test = false
hint = """PartialEqトレイトを実装して、等価比較の方法を学びます。自作型での比較演算子の動作を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_drop"
dir = "11_traits_Implement_the_drop_trait_for_RAII_patterns"
test = false
hint = """ユーザー定義のDropトレイトを実装して、リソースの解放処理を学びます。"""
skip_check_unsolved = true

[[exercises]]
name = "1_generics"
dir = "12_traits_Understand_the_trade_offs_between_generics_and_trait_objects"
test = false
hint = """ジェネリクスの基本を学びます。型パラメータを使って汎用的な関数や構造体を実装しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "2_trait_objects"
dir = "12_traits_Understand_the_trade_offs_between_generics_and_trait_objects"
test = false
hint = """トレイトオブジェクトを使って異なる型を一括で処理する方法を学びます。dynキーワードを使い、ランタイムで型が決定される方法を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "3_trait_for_trait"
dir = "12_traits_Understand_the_trade_offs_between_generics_and_trait_objects"
test = false
hint = """トレイトを別のトレイトに対して実装する方法を学びます。"""
skip_check_unsolved = false

[[exercises]]
name = "4_include_different_struct"
dir = "12_traits_Understand_the_trade_offs_between_generics_and_trait_objects"
test = false
hint = """異なる構造体をトレイトオブジェクトとしてまとめる方法を学びます。共通のインターフェースを持たせる設計を試しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_required_and_default_methods"
dir = "13_traits_Use_default_implementations_to_minimize_required_trait_methods"
test = false
hint = """トレイトにおける必須メソッドとデフォルトメソッドの違いを学びます。デフォルト実装を使うことで必要なメソッドの実装を最小限に抑える方法を確認しましょう。"""
skip_check_unsolved = false

[[exercises]]
name = "1_hint_for_panic"
dir = "18_concepts_Dont_panic"
test = true
hint = """Rustではパニック処理を適切に扱う方法を学びます。適切なエラーハンドリングを実装して、安全なコードを書く方法を確認しましょう。"""
skip_check_unsolved = false
